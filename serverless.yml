service: aws-exchange-demo
useDotenv: true

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  lambdaHashingVersion: 20201221
  timeout: 300
  memorySize: 512
  httpApi:
    payload: '2.0'
    # disableDefaultEndpoint: true
  ecr:
    # In this section you can define images that will be built locally and uploaded to ECR
    images:
      aws-exchange-demo:
        path: ./
  environment:
    AAD_APPID: ${env:AAD_APPID}
    AAD_ORG: ${env:AAD_ORG}
    CERT_PATH: ${env:CERT_PATH}
    CERT_PASSWORD: ${env:CERT_PASSWORD}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

plugins:
  - serverless-apigateway-service-proxy

functions:
  aws-exchange-contact-processor:
    image:
      name: aws-exchange-demo
    reservedConcurrency: 1
    events:
      - http:
          path: /users/get/{userName}
          method: get
      - http:
          path: /users/create
          method: post
      - sqs:
          arn:
            Fn::GetAtt:
              - ContactProcessingQueue
              - Arn
          batchSize: 10
          maximumBatchingWindow: 60
    environment:
      PS_HandlerScript: app.handler.ps1
      PS_HandlerFunction: Invoke-ExchangeProcessor

#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# CloudFormation resource templates
resources:
  Resources:
    ContactProcessingQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "Contact_Processing_Queue"
        VisibilityTimeout: 900 # As the Exchange runspace has a 15-minute timeout, set the visibility to 15min

custom:
  apiGatewayServiceProxies:
    - sqs:
        path: /process-contact
        method: post
        queueName: { 'Fn::GetAtt': ['ContactProcessingQueue', 'QueueName'] }
        cors: false
        response:
          template:
            # `success` is used when the integration response is 200
            success: |-
              { "message": "accepted" }
            # `clientError` is used when the integration response is 400
            clientError: |-
              { "message": "there is an error in your request" }
            # `serverError` is used when the integration response is 500
            serverError: |-
              { "message": "there was an error handling your request" }